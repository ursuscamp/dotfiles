vim.keymap.set('n', '<leader>w', '<cmd>w<CR>', { desc = 'Write buffer' })
vim.keymap.set('n', '<leader>q', '<cmd>q<CR>', { desc = 'Close window' })
vim.keymap.set('n', '<leader>c', '<cmd>bdelete!<CR>', { desc = 'Close buffer' })
vim.keymap.set('n', '<leader>X', '<cmd>%bdelete!<CR>', { desc = 'Close all buffers' })
vim.keymap.set('n', '<C-q>', '<cmd>qa!<CR>', { desc = 'Close Neovim' })
vim.keymap.set('i', 'jk', '<Esc>', { desc = 'Leave insert mode' })
vim.keymap.set('n', '<leader>sv', '<cmd>vsplit<CR>', { desc = 'Split vertically' })
vim.keymap.set('n', '<leader>sh', '<cmd>split<CR>', { desc = 'Split horizontally' })
vim.keymap.set('n', 'U', '<C-r>', { desc = 'Redo' })

vim.keymap.set('n', 'K', '<cmd>lua vim.lsp.buf.hover()<cr>', { desc = "Hover info" })
vim.keymap.set('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<cr>', { desc = "Goto definition" })
vim.keymap.set('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<cr>', { desc = "Goto declaration" })
vim.keymap.set('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<cr>', { desc = "Goto implementation" })
vim.keymap.set('n', 'go', '<cmd>lua vim.lsp.buf.type_definition()<cr>', { desc = "Goto type definition" })
vim.keymap.set('n', 'gR', '<cmd>lua vim.lsp.buf.references()<cr>', { desc = "Goto references" })
vim.keymap.set('n', 'gr', '<cmd>lua vim.lsp.buf.rename()<cr>', { desc = "Rename" })
vim.keymap.set('n', 'ga', '<cmd>lua vim.lsp.buf.code_action()<cr>', { desc = "Code actions" })
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, { desc = 'Goto previous diagnostic' })
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, { desc = 'Goto next diagnostic' })
vim.keymap.set('n', '<leader>lh', function()
	vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled({}))
end, { desc = "Toggle inlay hints" })
vim.keymap.set('n', '<leader>L', '<cmd>Lazy<CR>', { desc = "Open Lazy dialog" })
